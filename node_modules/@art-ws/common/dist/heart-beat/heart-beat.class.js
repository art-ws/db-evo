"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HeartBeatBase = void 0;
const slf_1 = require("@art-ws/slf");
const events_1 = require("events");
const TICK_EVENT = "TICK_EVENT";
const DEFAULT_INTERVAL = 5 * 1000;
class HeartBeatBase {
    constructor(options) {
        this.logger = slf_1.getLogger(HeartBeatBase);
        this.id = 0;
        this.interval = DEFAULT_INTERVAL;
        this.active = false;
        this.emitter = new events_1.EventEmitter();
        this.timeout = null;
        const o = options ?? {};
        if (o.interval) {
            this.interval = options.interval;
        }
        if (o.autostart) {
            this.up();
        }
    }
    stop() {
        if (this.timeout) {
            clearTimeout(this.timeout);
        }
        this.timeout = null;
    }
    nextTick(interval) {
        if (this.timeout) {
            return;
        }
        this.stop();
        if (!this.active) {
            return;
        }
        this.timeout = setTimeout(() => {
            this.timeout = null;
            this.emitTick();
        }, interval || DEFAULT_INTERVAL);
    }
    emitTick() {
        if (!this.active) {
            return;
        }
        this.id++;
        if (Number.MAX_VALUE === this.id) {
            this.id = 1;
        }
        this.emitter.emit(TICK_EVENT, this.id);
        this.nextTick(this.interval || DEFAULT_INTERVAL);
    }
    up() {
        this.logger.trace("up");
        this.active = true;
        this.emitTick();
    }
    down() {
        this.logger.trace("down");
        this.active = false;
        this.stop();
    }
    isActive() {
        return Boolean(this.active);
    }
    onTick(handler, options) {
        const o = options || {};
        this.logger.trace(() => [`${o.caller ?? "<UNKNOWN>"} subscribed`]);
        this.emitter.addListener(TICK_EVENT, handler);
        return {
            unsubscribe: () => {
                this.emitter.removeListener(TICK_EVENT, handler);
            },
        };
    }
}
exports.HeartBeatBase = HeartBeatBase;
//# sourceMappingURL=heart-beat.class.js.map