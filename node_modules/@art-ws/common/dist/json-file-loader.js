"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.lookupAndResolveJsonableFile = exports.resolveJsonableFile = exports.resolveJsonableData = exports.lookupAndLoadJsonableFile = exports.lookupJsonableFile = exports.loadJsonableFile = exports.JS_EXT = exports.JSON_EXT = exports.YAML_EXT = void 0;
const tslib_1 = require("tslib");
const fs_extra_1 = tslib_1.__importDefault(require("fs-extra"));
const js_yaml_1 = tslib_1.__importDefault(require("js-yaml"));
const json5_1 = tslib_1.__importDefault(require("json5"));
const path_1 = tslib_1.__importDefault(require("path"));
const interpolate_1 = require("./interpolate");
const json_refs_resolver_1 = require("./json-refs-resolver");
exports.YAML_EXT = ["yaml", "yml"];
exports.JSON_EXT = ["json", "json5"];
exports.JS_EXT = ["js"];
const isAnyExt = (s, extensions) => Boolean(extensions.find((ext) => s.endsWith(`.${ext}`)));
const isYamlFile = (s) => isAnyExt(s, exports.YAML_EXT);
const isJsonFile = (s) => isAnyExt(s, exports.JSON_EXT);
const isJsFile = (s) => isAnyExt(s, exports.JS_EXT);
const parseJSON = (data) => (data ? json5_1.default.parse(data) : null);
const parseYaml = (data) => (data ? js_yaml_1.default.load(data) : null);
const loadAndParseFile = (filename, parser) => parser(fs_extra_1.default.readFileSync(filename, { encoding: "utf-8" }));
async function loadJsonableFile(filename) {
    if (isJsFile(filename)) {
        return require(filename);
    }
    else if (isYamlFile(filename)) {
        return loadAndParseFile(filename, parseYaml);
    }
    else if (isJsonFile(filename)) {
        return loadAndParseFile(filename, parseJSON);
    }
    throw new Error(`File '${filename}' format not supported`);
}
exports.loadJsonableFile = loadJsonableFile;
const EXTENSIONS = [...exports.YAML_EXT, ...exports.JSON_EXT, ...exports.JS_EXT];
function lookupJsonableFile(cwd, candidates) {
    const filenames = candidates
        .map((name) => path_1.default.extname(name) ? [name] : EXTENSIONS.map((ext) => `${name}.${ext}`))
        .flat()
        .map((filename) => path_1.default.join(cwd, filename));
    const filename = filenames.find((filename) => fs_extra_1.default.existsSync(filename));
    return filename;
}
exports.lookupJsonableFile = lookupJsonableFile;
async function lookupAndLoadJsonableFile(cwd, candidates) {
    const filename = lookupJsonableFile(cwd, candidates);
    if (!filename) {
        return { filename: null, data: null };
    }
    const data = await loadJsonableFile(filename);
    return { filename, data };
}
exports.lookupAndLoadJsonableFile = lookupAndLoadJsonableFile;
async function resolveJsonableData(args) {
    const { data, baseUrl } = args;
    const data1 = interpolate_1.iterpolateObject(data);
    const data2 = await json_refs_resolver_1.resolveJsonRefs({ baseUrl, data: data1 });
    const data3 = interpolate_1.iterpolateObject(data2);
    return data3;
}
exports.resolveJsonableData = resolveJsonableData;
async function resolveJsonableFile(filename) {
    const rawData = await loadJsonableFile(filename);
    const data = await resolveJsonableData({
        data: rawData,
        baseUrl: filename,
    });
    return data;
}
exports.resolveJsonableFile = resolveJsonableFile;
async function lookupAndResolveJsonableFile(cwd, candidates, context) {
    const result = await lookupAndLoadJsonableFile(cwd, candidates);
    if (result.filename) {
        let { data } = result;
        data = resolveJsonableData({
            data: data,
            baseUrl: result.filename,
        });
        return { filename: result.filename, data: data };
    }
    return { filename: null, data: null };
}
exports.lookupAndResolveJsonableFile = lookupAndResolveJsonableFile;
//# sourceMappingURL=json-file-loader.js.map