"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveJsonRefs = exports.doDereference = void 0;
const tslib_1 = require("tslib");
const json_schema_ref_parser_1 = tslib_1.__importDefault(require("@apidevtools/json-schema-ref-parser"));
const lodash_1 = tslib_1.__importDefault(require("lodash"));
const walk = async (o, fn, depth) => {
    for (const key in o) {
        if (typeof o[key] === "object" && !Array.isArray(o[key])) {
            await walk(o[key], fn, depth + 1);
        }
        else {
            await fn(o, key);
        }
    }
};
async function deRefs(data, baseUrl) {
    const tmp = { ...data };
    await walk(tmp, async (o, key) => {
        if (key === "$refs") {
            let refs = [];
            if (typeof o[key] === "string") {
                refs = [o[key]];
            }
            else if (Array.isArray(o[key])) {
                refs = o[key];
            }
            delete o[key];
            const refsPromises = refs.map(async (ref) => {
                const refData = { $ref: ref };
                const deRefData = await doDereference({ baseUrl, data: refData });
                return deRefData ?? {};
            });
            const deRefs = await Promise.all(refsPromises);
            deRefs.forEach((deRef) => {
                o = lodash_1.default.merge(o, deRef);
            });
        }
    }, 0);
    return { ...tmp };
}
const SUPPORTED_EXTENSIONS = [".json", ".yaml", ".yml"];
// https://apitools.dev/json-schema-ref-parser/
// https://apitools.dev/json-schema-ref-parser/docs/ref-parser.html#dereferenceschema-options-callback
async function doDereference(args) {
    const { data, baseUrl = "" } = args;
    if (baseUrl && SUPPORTED_EXTENSIONS.find((x) => baseUrl.includes(x))) {
        const rp = new json_schema_ref_parser_1.default();
        if (data) {
            return await rp.dereference(baseUrl, data, {});
        }
        else if (baseUrl) {
            return await rp.dereference(baseUrl);
        }
        return data;
    }
    return data;
}
exports.doDereference = doDereference;
async function resolveJsonRefs(args) {
    const { data, baseUrl = "" } = args;
    const json1 = data ? await deRefs(data, baseUrl) : null;
    const json2 = await doDereference({ data: json1, baseUrl });
    const json3 = await deRefs(json2, baseUrl);
    return json3;
}
exports.resolveJsonRefs = resolveJsonRefs;
//# sourceMappingURL=json-refs-resolver.js.map