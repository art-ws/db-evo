import { MemoryCacheBase } from "../mem-cache";
export interface IManagedPoolAdapter<T, A, C> {
    create: (args: A) => Promise<T>;
    canDestroy: (item: T) => boolean;
    destroy: (item: T) => void;
    ID: (args: A) => string;
    getCacheOptions: () => C;
}
export interface IManageItem<T> {
    item: T;
    release: () => void;
}
export declare const DEFAULT_TIME_TO_IDLE: number;
export declare class ManagedPool<T, A, C> {
    protected readonly adapter: IManagedPoolAdapter<T, A, C>;
    protected readonly cache: MemoryCacheBase;
    logger: import("@art-ws/slf").Logger;
    private readonly poolCacheOptions;
    constructor(adapter: IManagedPoolAdapter<T, A, C>, cache: MemoryCacheBase);
    acquire(args: A): Promise<T>;
    acquireManaged(args: A): Promise<IManageItem<T>>;
    close(): void;
}
//# sourceMappingURL=managed-pool.d.ts.map