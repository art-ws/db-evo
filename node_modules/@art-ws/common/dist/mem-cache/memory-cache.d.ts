import { HeartBeat } from "../heart-beat";
import { CacheStat } from "./cache-stat";
export declare type CacheCanRemoveCallback = (value?: unknown, key?: string) => boolean;
export declare type CacheOnRemoveCallback = (value?: unknown, key?: string) => void;
export interface CacheItemOptions {
    timeToIdle?: number;
    timeToLive?: number;
    sliding?: boolean;
    canRemove?: CacheCanRemoveCallback;
    onRemove?: CacheOnRemoveCallback;
}
export declare class CacheItem {
    private readonly createdAt;
    private lastHitAt;
    private readonly cacheValue;
    private cacheHitCount;
    options: CacheItemOptions;
    constructor(value: unknown, options: CacheItemOptions);
    get timeToLive(): number;
    get hitCount(): number;
    get isExpired(): boolean;
    get isSlidingExpiration(): boolean;
    get lastActivityAt(): number;
    get value(): unknown;
    canRemove(key: string): boolean;
    onRemove(key: string): void;
}
export interface ExpirationStrategy {
    isExpired: (self: MemoryCacheBase, item: CacheItem) => boolean;
}
export interface MemoryCacheOptions {
    expirationStrategy?: ExpirationStrategy;
    heartBeat?: HeartBeat.IHeartBeat;
}
export declare class MemoryCacheBase {
    logger: import("@art-ws/slf").Logger;
    private readonly heartBeat;
    private readonly cache;
    private readonly expirationStrategy;
    private subscription;
    readonly stat: CacheStat;
    constructor(options?: MemoryCacheOptions);
    get size(): number;
    isItemExpired(item: CacheItem): boolean;
    get<T>(key: string): T;
    checkItemExpired(key: string, item: CacheItem): void;
    removeItem(key: string, item: CacheItem, force?: boolean): void;
    getOrElse<T>(key: string, fn: () => T): T;
    getOrUpdate<T>(key: string, fn: () => T, options?: CacheItemOptions): T;
    getOrUpdateAsync<T>(key: string, fn: () => Promise<T>, options?: CacheItemOptions): Promise<T>;
    keys(): string[];
    has(key: string): boolean;
    forEach(callback: (value?: unknown, key?: string) => void): void;
    set(key: string, value: unknown, options?: CacheItemOptions): this;
    clear(): void;
    vacuum(): void;
    destroy(): void;
}
//# sourceMappingURL=memory-cache.d.ts.map