"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MemoryCacheBase = exports.CacheItem = void 0;
const slf_1 = require("@art-ws/slf");
const promise_race_1 = require("../shared/promise-race");
const cache_stat_1 = require("./cache-stat");
function now() {
    return new Date().valueOf();
}
const DEFAULT_TTL = 15 * 1000; // Milliseconds
const defaultCacheItemOptions = {
    timeToLive: DEFAULT_TTL,
};
class CacheItem {
    constructor(value, options) {
        this.createdAt = now();
        this.lastHitAt = null;
        this.cacheValue = null;
        this.cacheHitCount = 0;
        this.cacheValue = value;
        this.options = options || {};
        if (this.options.timeToIdle) {
            this.options.sliding = true;
            this.options.timeToLive = this.options.timeToIdle;
        }
    }
    get timeToLive() {
        return this.options.timeToLive || 0;
    }
    get hitCount() {
        return this.cacheHitCount;
    }
    get isExpired() {
        return this.lastActivityAt + this.timeToLive < now();
    }
    get isSlidingExpiration() {
        return Boolean(this.options.sliding);
    }
    get lastActivityAt() {
        return this.isSlidingExpiration
            ? this.lastHitAt || this.createdAt
            : this.createdAt;
    }
    get value() {
        this.lastHitAt = now();
        this.cacheHitCount++;
        if (Number.MAX_VALUE === this.cacheHitCount) {
            this.cacheHitCount = 1;
        }
        return this.cacheValue;
    }
    canRemove(key) {
        if (this.options.canRemove) {
            return this.options.canRemove(this.cacheValue, key);
        }
        return true;
    }
    onRemove(key) {
        if (this.options.onRemove) {
            this.options.onRemove(this.cacheValue, key);
        }
    }
}
exports.CacheItem = CacheItem;
function isEmpty(v) {
    return v === undefined || v === null;
}
class MemoryCacheBase {
    constructor(options) {
        this.logger = slf_1.getLogger(MemoryCacheBase);
        this.cache = new Map();
        this.expirationStrategy = null;
        this.stat = new cache_stat_1.CacheStat();
        if (options) {
            this.expirationStrategy = options.expirationStrategy ?? null;
        }
        if (options?.heartBeat) {
            this.heartBeat = options.heartBeat;
            this.subscription = this.heartBeat.onTick(() => {
                this.vacuum();
            }, { caller: "MemoryCacheBase" });
        }
    }
    get size() {
        return this.cache.size;
    }
    isItemExpired(item) {
        return this.expirationStrategy
            ? this.expirationStrategy.isExpired(this, item)
            : item.isExpired;
    }
    get(key) {
        const item = this.cache.get(key);
        if (!item) {
            this.stat.incMiss();
            return null;
        }
        let result = null;
        if (item.canRemove(key) && this.isItemExpired(item)) {
            this.stat.incMiss();
            this.removeItem(key, item);
        }
        else {
            result = item.value;
            if (result) {
                this.stat.incHit();
                this.logger.trace(() => [
                    `FROM CACHE [${key}] ( Hits: ${item.hitCount} )`,
                ]);
            }
            else {
                this.stat.incMiss();
            }
        }
        return result;
    }
    checkItemExpired(key, item) {
        this.logger.trace(() => [`checkItemExpired(${key})`]);
        const targetItem = item || this.cache.get(key);
        if (this.isItemExpired(targetItem)) {
            this.removeItem(key, targetItem);
        }
    }
    removeItem(key, item, force) {
        const targetItem = item ?? this.cache.get(key);
        let canRemove = true;
        if (targetItem) {
            canRemove = targetItem.canRemove(key) ?? Boolean(force);
            if (canRemove) {
                targetItem.onRemove(key);
            }
        }
        this.logger.trace(() => [
            { key, canRemove },
            `TRY DELETE FROM CACHE[${key}]`,
        ]);
        if (canRemove) {
            this.cache.delete(key);
            this.logger.debug(() => [`DELETE FROM CACHE[${key}]`]);
        }
    }
    getOrElse(key, fn) {
        const value = this.get(key);
        return isEmpty(value) ? fn() : value;
    }
    getOrUpdate(key, fn, options) {
        let value = this.get(key);
        if (isEmpty(value)) {
            value = fn();
            this.set(key, value, options);
        }
        return value;
    }
    async getOrUpdateAsync(key, fn, options) {
        let value = this.get(key);
        if (isEmpty(value)) {
            value = await promise_race_1.racePromise(key, () => Promise.resolve(fn()), this);
            this.set(key, value, options);
        }
        return value;
    }
    keys() {
        return [...this.cache.keys()];
    }
    has(key) {
        return this.cache.has(key);
    }
    forEach(callback) {
        this.cache.forEach((value, key) => {
            callback(value.value, key);
        });
    }
    set(key, value, options) {
        this.cache.set(key, new CacheItem(value, {
            ...defaultCacheItemOptions,
            ...(options || {}),
        }));
        this.logger.debug(() => [`TO CACHE[${key}]`]);
        if (this.heartBeat) {
            this.heartBeat.up();
        }
        return this;
    }
    clear() {
        this.logger.debug(() => [`CLEAR`]);
        this.cache.forEach((item, key) => {
            if (item) {
                try {
                    this.removeItem(key, item, true);
                }
                catch (err) {
                    this.logger.error(err, `ERROR TO REMOVE KEY: ${key}`);
                }
            }
        });
        this.cache.clear();
    }
    vacuum() {
        if (!this.size) {
            return;
        }
        this.logger.trace(() => [`VACUUM(${this.size})`]);
        this.cache.forEach((item, key) => {
            this.checkItemExpired(key, item);
        });
    }
    destroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    }
}
exports.MemoryCacheBase = MemoryCacheBase;
//# sourceMappingURL=memory-cache.js.map