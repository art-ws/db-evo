export declare class Optional<A> {
    private readonly _value;
    static none: Optional<unknown>;
    static isEmpty(v: unknown): boolean;
    static of<B>(value: B): Optional<B>;
    static isOptional(value: unknown): boolean;
    private constructor();
    get value(): A;
    get isEmpty(): boolean;
    get isDefined(): boolean;
    get nonEmpty(): boolean;
    orElse(alternative: A | (() => A)): Optional<A>;
    getOrElse(fallback: A | (() => A)): A;
    map<B>(f: (x: A) => B): Optional<B>;
    flatMap<B>(f: (x: A) => B): B;
    forEach(f: (x: A) => void): void;
    fold<B>(ifEmpty: (A | B) | (() => A | B), f?: (x: A) => B): A | B;
    contains(value: A): boolean;
}
//# sourceMappingURL=optional.d.ts.map