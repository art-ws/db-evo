declare type Func<T> = (...args: any[]) => T;
interface Thenable {
    then: Func<void>;
}
export declare function racePromise<T>(keyFn: string | Func<string>, fnOrThenable: Func<T> | Thenable | Func<Promise<T>>, scope: object): Promise<T>;
export declare function synchronized<T>(syncKey: string, scope: object): (fn: Func<Promise<T>>) => any;
export {};
//# sourceMappingURL=promise-race.d.ts.map