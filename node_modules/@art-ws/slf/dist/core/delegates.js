"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SimpleLogDelegate = exports.NoopLogDelegate = exports.LogDelegateBase = void 0;
const SLF_LEVEL_VALUES = {
    all: 0,
    trace: 10,
    debug: 20,
    info: 30,
    warn: 40,
    error: 50,
    fatal: 60,
    off: Number.MAX_VALUE,
};
class LogDelegateBase {
    constructor(cfg) {
        this.cfg = cfg;
    }
    onLog(e) { }
    getCategoryLevel(category) {
        const { cfg } = this;
        if (!cfg)
            return "all";
        const def = (cfg.categories ?? {})[category] ?? "all";
        if (typeof def === "string") {
            return def;
        }
        return def?.level ?? cfg.defaultLevel ?? "all";
    }
    getLevelValue(level) {
        return SLF_LEVEL_VALUES[level] ?? SLF_LEVEL_VALUES.all;
    }
    getCategoryLevelCode(category) {
        return this.getLevelValue(this.getCategoryLevel(category));
    }
    isCategoryLevelEnabled(category, level) {
        const categoryLevel = this.getCategoryLevel(category);
        const categoryLevelValue = this.getLevelValue(categoryLevel);
        const levelValue = this.getLevelValue(level);
        const isEnabled = levelValue >= categoryLevelValue;
        return isEnabled;
    }
}
exports.LogDelegateBase = LogDelegateBase;
class NoopLogDelegate {
    onLog(e) { }
    isCategoryLevelEnabled(category, level) {
        return false;
    }
}
exports.NoopLogDelegate = NoopLogDelegate;
class SimpleLogDelegate {
    onLog(e) {
        console.log(e.id, new Date(), `${e.category}#${e.level}`, e.payload);
    }
    isCategoryLevelEnabled(category, level) {
        return false;
    }
}
exports.SimpleLogDelegate = SimpleLogDelegate;
//# sourceMappingURL=delegates.js.map