"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLogger = exports.getCallerFilename = exports.className = exports.SlfAssertDSL = void 0;
const controller_1 = require("./controller");
class SlfAssertDSL {
    constructor(o) {
        this.o = o;
        this.name = Object.keys(o)[0];
        this.value = o[this.name];
    }
    typeOf(type) {
        if (typeof this.value !== type)
            throw new Error(`Expected type is '${type}' for '${this.name}'`);
        return this;
    }
    string() {
        this.typeOf("string");
        return this;
    }
    defined() {
        if (!this.value)
            throw new Error(`'${this.name}' not defined`);
        return this;
    }
    eq(val) {
        if (this.value !== val)
            throw new Error(`'${this.name}' not equals '${this.value}' to '${val}'`);
        return this;
    }
}
exports.SlfAssertDSL = SlfAssertDSL;
function className(classProto) {
    const assert = (o) => new SlfAssertDSL(o);
    assert({ classProto }).typeOf("function");
    const [x0, x1] = classProto.toString().split(" ");
    assert({ x0 }).string().defined();
    const x0u = x0.toLowerCase().trim();
    assert({ x0u }).eq("class");
    assert({ x1 }).string().defined();
    return x1.trim();
}
exports.className = className;
function getCallerFilename(e4) {
    const assert = (o) => new SlfAssertDSL(o);
    assert({ e4 }).string().defined();
    if (e4 === undefined)
        throw new Error();
    const v1 = (e4.match(/[\/\\](.+)\.js:\d+:\d+\)$/) || [])[1];
    assert({ v1 }).string().defined();
    const v2 = (v1.match(/[\/\\](\w+)$/) || [])[1];
    assert({ v2 }).string().defined();
    return v2;
}
exports.getCallerFilename = getCallerFilename;
function callerFilename() {
    const assert = (o) => new SlfAssertDSL(o);
    const e = new Error();
    const list = e.stack?.split("at ") || [];
    const e4 = (list[4] || "").trim();
    assert({ e4 }).string().defined();
    return getCallerFilename(e4);
}
function toCategory(categoryOrClass) {
    if (!categoryOrClass) {
        return callerFilename();
    }
    if (typeof categoryOrClass === "string") {
        return categoryOrClass;
    }
    return className(categoryOrClass);
}
function getLogger(categoryOrClass) {
    return new controller_1.LoggerImpl(controller_1.LogController.instance, toCategory(categoryOrClass));
}
exports.getLogger = getLogger;
//# sourceMappingURL=logger.js.map