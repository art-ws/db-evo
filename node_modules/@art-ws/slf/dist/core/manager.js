"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LogController = exports.LoggerImpl = void 0;
const delegates_1 = require("./delegates");
const types_1 = require("./types");
let identifier = 0;
function getID() {
    return identifier === Number.MAX_VALUE ? (identifier = 0) : identifier++;
}
function getValues(o) {
    return Object.values(o);
}
function toArgs() {
    if (Array.isArray(arguments[0]) && arguments.length === 1) {
        return arguments[0];
    }
    return getValues(arguments);
}
const nil = 0;
class LoggerImpl {
    constructor(controller, category) {
        this.controller = controller;
        this.category = category;
    }
    _log(level, args) {
        if (!this._isEnabled(level)) {
            return;
        }
        let payload = nil;
        if (args.length === 1 && typeof args[0] === "function") {
            const fn = args[0];
            const argsFn = fn(toArgs);
            payload = Array.isArray(argsFn) ? argsFn : [argsFn];
        }
        else {
            payload = getValues(args);
        }
        const logEntry = new types_1.LogEntry(getID(), this.category, level, payload);
        this.controller.emit(logEntry);
    }
    _isEnabled(level) {
        return this.controller.isCategoryLevelEnabled(this.category, level);
    }
    isTraceEnabled() {
        return this._isEnabled("trace");
    }
    trace(...args) {
        this._log("trace", arguments);
    }
    isDebugEnabled() {
        return this._isEnabled("debug");
    }
    debug(...args) {
        this._log("debug", arguments);
    }
    isInfoEnabled() {
        return this._isEnabled("info");
    }
    info(...args) {
        this._log("info", arguments);
    }
    isWarnEnabled() {
        return this._isEnabled("warn");
    }
    warn(...args) {
        this._log("warn", arguments);
    }
    isErrorEnabled() {
        return this._isEnabled("error");
    }
    error(...args) {
        this._log("error", arguments);
    }
    isFatalEnabled() {
        return true;
    }
    fatal(...args) {
        this._log("fatal", arguments);
    }
    logError(error, message) {
        const msg = message ?? "Error";
        const err = error ?? new Error();
        this.error({ err, stack: err.stack }, msg);
    }
}
exports.LoggerImpl = LoggerImpl;
class LogController {
    constructor() {
        this.delegate = LogController.getDefaultDelegate();
    }
    static getDefaultDelegate() {
        return LogController.instance.config().isTest ? new delegates_1.NoopLogDelegate() : new delegates_1.SimpleLogDelegate();
    }
    config(value) {
        if (value) {
            this.value = value;
        }
        return this.value;
    }
    setDelegate(delegate) {
        this.delegate = delegate;
    }
    static silent() {
        LogController.instance.setDelegate(new delegates_1.NoopLogDelegate());
    }
    emit(e) {
        if (this.delegate) {
            this.delegate.onLog(e);
        }
    }
    isCategoryLevelEnabled(category, level) {
        return this.delegate
            ? this.delegate.isCategoryLevelEnabled(category, level)
            : true;
    }
}
exports.LogController = LogController;
LogController.instance = new LogController();
//# sourceMappingURL=manager.js.map