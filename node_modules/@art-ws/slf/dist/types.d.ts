export interface PinoLogFn {
    (msg: string, ...args: unknown[]): void;
    (obj: object, msg?: string, ...args: unknown[]): void;
}
/**
 * Support arguments lazy culculation if log level actually enabled to boost perfomance.
 *
 * Example:
 *   log.debug ( _ => _({a: 1, b: culcLogValue2()}, 'log message ${culcLogValue2()}'))
 *   log.trace(() => [{ value: calcValue() }, 'log message with heavy culculation'])
 */
export declare type SlfLogFn = (fn: (...args: unknown[]) => unknown) => void;
export interface LogFn extends PinoLogFn, SlfLogFn {
}
export interface ILogFunctions {
    trace: LogFn;
    debug: LogFn;
    info: LogFn;
    warn: LogFn;
    error: LogFn;
    fatal: LogFn;
}
export declare type LogLevelEnabledFn = () => boolean;
export interface ILogLevelEnabledIFunctions {
    isTraceEnabled: LogLevelEnabledFn;
    isDebugEnabled: LogLevelEnabledFn;
    isInfoEnabled: LogLevelEnabledFn;
    isWarnEnabled: LogLevelEnabledFn;
    isErrorEnabled: LogLevelEnabledFn;
    isFatalEnabled: LogLevelEnabledFn;
}
export interface Logger extends ILogFunctions, ILogLevelEnabledIFunctions {
    logError: (error: Error, message?: string) => void;
}
export declare const noopLogger: Logger;
export declare type SlfLogLevels = keyof ILogFunctions;
export declare type LogLevel = SlfLogLevels | "all" | "off";
export declare class LogEntry {
    id: number;
    category: string;
    level: LogLevel;
    payload: unknown[];
    constructor(id: number, category: string, level: LogLevel, payload: unknown[]);
}
export interface ILogDelegate {
    onLog: (e: LogEntry) => void;
    isCategoryLevelEnabled: (category: string, level: LogLevel) => boolean;
}
export declare namespace slf {
    interface Category {
        level: LogLevel;
    }
}
export interface SlfConfig {
    defaultLevel: LogLevel;
    categories: {
        [category: string]: slf.Category | LogLevel;
    };
}
//# sourceMappingURL=types.d.ts.map