#!/usr/bin/env node
!function(e,t){for(var o in t)e[o]=t[o]}(exports,function(e){var t={};function o(i){if(t[i])return t[i].exports;var n=t[i]={i:i,l:!1,exports:{}};return e[i].call(n.exports,n,n.exports,o),n.l=!0,n.exports}return o.m=e,o.c=t,o.d=function(e,t,i){o.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},o.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.t=function(e,t){if(1&t&&(e=o(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(o.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)o.d(i,n,function(t){return e[t]}.bind(null,n));return i},o.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(t,"a",t),t},o.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},o.p="",o(o.s=14)}([function(e,t,o){"use strict";o.r(t),o.d(t,"__extends",(function(){return n})),o.d(t,"__assign",(function(){return r})),o.d(t,"__rest",(function(){return l})),o.d(t,"__decorate",(function(){return u})),o.d(t,"__param",(function(){return s})),o.d(t,"__metadata",(function(){return d})),o.d(t,"__awaiter",(function(){return a})),o.d(t,"__generator",(function(){return c})),o.d(t,"__exportStar",(function(){return f})),o.d(t,"__values",(function(){return p})),o.d(t,"__read",(function(){return m})),o.d(t,"__spread",(function(){return g})),o.d(t,"__spreadArrays",(function(){return y})),o.d(t,"__await",(function(){return v})),o.d(t,"__asyncGenerator",(function(){return w})),o.d(t,"__asyncDelegator",(function(){return _})),o.d(t,"__asyncValues",(function(){return b})),o.d(t,"__makeTemplateObject",(function(){return h})),o.d(t,"__importStar",(function(){return x})),o.d(t,"__importDefault",(function(){return C}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var i=function(e,t){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var o in t)t.hasOwnProperty(o)&&(e[o]=t[o])})(e,t)};function n(e,t){function o(){this.constructor=e}i(e,t),e.prototype=null===t?Object.create(t):(o.prototype=t.prototype,new o)}var r=function(){return(r=Object.assign||function(e){for(var t,o=1,i=arguments.length;o<i;o++)for(var n in t=arguments[o])Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n]);return e}).apply(this,arguments)};function l(e,t){var o={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&t.indexOf(i)<0&&(o[i]=e[i]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(i=Object.getOwnPropertySymbols(e);n<i.length;n++)t.indexOf(i[n])<0&&Object.prototype.propertyIsEnumerable.call(e,i[n])&&(o[i[n]]=e[i[n]])}return o}function u(e,t,o,i){var n,r=arguments.length,l=r<3?t:null===i?i=Object.getOwnPropertyDescriptor(t,o):i;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,o,i);else for(var u=e.length-1;u>=0;u--)(n=e[u])&&(l=(r<3?n(l):r>3?n(t,o,l):n(t,o))||l);return r>3&&l&&Object.defineProperty(t,o,l),l}function s(e,t){return function(o,i){t(o,i,e)}}function d(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function a(e,t,o,i){return new(o||(o=Promise))((function(n,r){function l(e){try{s(i.next(e))}catch(e){r(e)}}function u(e){try{s(i.throw(e))}catch(e){r(e)}}function s(e){e.done?n(e.value):new o((function(t){t(e.value)})).then(l,u)}s((i=i.apply(e,t||[])).next())}))}function c(e,t){var o,i,n,r,l={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return r={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function u(r){return function(u){return function(r){if(o)throw new TypeError("Generator is already executing.");for(;l;)try{if(o=1,i&&(n=2&r[0]?i.return:r[0]?i.throw||((n=i.return)&&n.call(i),0):i.next)&&!(n=n.call(i,r[1])).done)return n;switch(i=0,n&&(r=[2&r[0],n.value]),r[0]){case 0:case 1:n=r;break;case 4:return l.label++,{value:r[1],done:!1};case 5:l.label++,i=r[1],r=[0];continue;case 7:r=l.ops.pop(),l.trys.pop();continue;default:if(!(n=l.trys,(n=n.length>0&&n[n.length-1])||6!==r[0]&&2!==r[0])){l=0;continue}if(3===r[0]&&(!n||r[1]>n[0]&&r[1]<n[3])){l.label=r[1];break}if(6===r[0]&&l.label<n[1]){l.label=n[1],n=r;break}if(n&&l.label<n[2]){l.label=n[2],l.ops.push(r);break}n[2]&&l.ops.pop(),l.trys.pop();continue}r=t.call(e,l)}catch(e){r=[6,e],i=0}finally{o=n=0}if(5&r[0])throw r[1];return{value:r[0]?r[1]:void 0,done:!0}}([r,u])}}}function f(e,t){for(var o in e)t.hasOwnProperty(o)||(t[o]=e[o])}function p(e){var t="function"==typeof Symbol&&e[Symbol.iterator],o=0;return t?t.call(e):{next:function(){return e&&o>=e.length&&(e=void 0),{value:e&&e[o++],done:!e}}}}function m(e,t){var o="function"==typeof Symbol&&e[Symbol.iterator];if(!o)return e;var i,n,r=o.call(e),l=[];try{for(;(void 0===t||t-- >0)&&!(i=r.next()).done;)l.push(i.value)}catch(e){n={error:e}}finally{try{i&&!i.done&&(o=r.return)&&o.call(r)}finally{if(n)throw n.error}}return l}function g(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(m(arguments[t]));return e}function y(){for(var e=0,t=0,o=arguments.length;t<o;t++)e+=arguments[t].length;var i=Array(e),n=0;for(t=0;t<o;t++)for(var r=arguments[t],l=0,u=r.length;l<u;l++,n++)i[n]=r[l];return i}function v(e){return this instanceof v?(this.v=e,this):new v(e)}function w(e,t,o){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,n=o.apply(e,t||[]),r=[];return i={},l("next"),l("throw"),l("return"),i[Symbol.asyncIterator]=function(){return this},i;function l(e){n[e]&&(i[e]=function(t){return new Promise((function(o,i){r.push([e,t,o,i])>1||u(e,t)}))})}function u(e,t){try{(o=n[e](t)).value instanceof v?Promise.resolve(o.value.v).then(s,d):a(r[0][2],o)}catch(e){a(r[0][3],e)}var o}function s(e){u("next",e)}function d(e){u("throw",e)}function a(e,t){e(t),r.shift(),r.length&&u(r[0][0],r[0][1])}}function _(e){var t,o;return t={},i("next"),i("throw",(function(e){throw e})),i("return"),t[Symbol.iterator]=function(){return this},t;function i(i,n){t[i]=e[i]?function(t){return(o=!o)?{value:v(e[i](t)),done:"return"===i}:n?n(t):t}:n}}function b(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,o=e[Symbol.asyncIterator];return o?o.call(e):(e=p(e),t={},i("next"),i("throw"),i("return"),t[Symbol.asyncIterator]=function(){return this},t);function i(o){t[o]=e[o]&&function(t){return new Promise((function(i,n){(function(e,t,o,i){Promise.resolve(i).then((function(t){e({value:t,done:o})}),t)})(i,n,(t=e[o](t)).done,t.value)}))}}}function h(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function x(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var o in e)Object.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t.default=e,t}function C(e){return e&&e.__esModule?e:{default:e}}},function(e,t){e.exports=require("chalk")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("debug")},function(e,t){e.exports=require("my-easy-fp")},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.concreteConfig=t.readConfigRC=t.cleansing=t.cleanGlobOptions=t.mergingGlobOptions=t.merging=t.createFromCli=t.getDeafultOptions=t.getRCFilename=t.CTIRC_FILENAME=void 0;const i=o(0),n=i.__importDefault(o(3)),r=i.__importDefault(o(18)),l=i.__importStar(o(7)),u=i.__importDefault(o(11)),s=o(4),d=i.__importStar(o(2)),a=i.__importStar(o(12)),c=a.promisify(l.readFile),f=a.promisify(l.exists),p=n.default("cti:create-test");t.CTIRC_FILENAME=".ctirc";const m={addNewline:!0,excludes:["@types","typings","__test__","__tests__","node_modules"],fileExcludePatterns:[],fileFirst:!1,globOptions:{cwd:process.cwd(),dot:!0,ignore:["@types/**","typings/**","__test__/**","__tests__/**","node_modules/**"],nonull:!0},includeCWD:!0,output:"index.ts",quote:"'",targetExts:["ts","tsx"],useSemicolon:!0,useTimestamp:!1,verbose:!1,withoutBackupFile:!1,withoutComment:!1};function g(e,t){var o,i,n,r,l,u,s,d;const a=null!=e?e:{},c=null!=t?t:{};return{cwd:null!==(i=null!==(o=c.cwd)&&void 0!==o?o:a.cwd)&&void 0!==i?i:m.globOptions.cwd,dot:null!==(r=null!==(n=c.dot)&&void 0!==n?n:a.dot)&&void 0!==r?r:m.globOptions.dot,ignore:null!==(u=null!==(l=c.ignore)&&void 0!==l?l:a.ignore)&&void 0!==u?u:m.globOptions.ignore,nonull:null!==(d=null!==(s=c.nonull)&&void 0!==s?s:a.nonull)&&void 0!==d?d:m.globOptions.nonull}}function y(e){if(null==e)return;const t=Object.keys(e).reduce((t,o)=>{var i;const n=null!=e?e:{};return void 0!==n[o]&&null!==n[o]?(t[o]="cwd"===o?d.resolve(null!==(i=n[o])&&void 0!==i?i:""):t[o]=n[o],t):t},{});return Object.keys(t).length<=0?void 0:t}function v(e){var t;const o={addNewline:e.addNewline,excludes:e.excludes,fileExcludePatterns:e.fileExcludePatterns,fileFirst:e.fileFirst,globOptions:y(null!==(t=e.globOptions)&&void 0!==t?t:{}),includeCWD:e.includeCWD,output:e.output,quote:e.quote,targetExts:e.targetExts,useSemicolon:e.useSemicolon,useTimestamp:e.useTimestamp,verbose:e.verbose,withoutBackupFile:e.withoutBackupFile,withoutComment:e.withoutComment};return Object.keys(o).reduce((t,o)=>(void 0!==e[o]&&null!==e[o]&&(t[o]=e[o]),t),{})}t.getRCFilename=function(e){return p("Test Path: ",d.join(d.resolve(e),t.CTIRC_FILENAME)),d.join(d.resolve(e),t.CTIRC_FILENAME)},t.getDeafultOptions=function(){return Object.assign(Object.assign({},m),{globOptions:Object.assign({},m.globOptions)})},t.createFromCli=function(e,t,o){var i,n,r,l,u,s,d,a,c,f,p,m,g,y;return{addNewline:null!==(i=e.addnewline)&&void 0!==i?i:void 0,excludes:null!==(n=e.excludes)&&void 0!==n?n:void 0,fileExcludePatterns:null!==(r=e.fileexcludes)&&void 0!==r?r:void 0,fileFirst:null!==(l=e.filefirst)&&void 0!==l?l:void 0,globOptions:{cwd:t},includeCWD:null!==(u=e.includecwd)&&void 0!==u?u:void 0,output:null!==(d=null!==(s=e.output)&&void 0!==s?s:o)&&void 0!==d?d:void 0,quote:null!==(a=e.quote)&&void 0!==a?a:void 0,targetExts:null!==(c=e.targetexts)&&void 0!==c?c:void 0,useSemicolon:null!==(f=e.usesemicolon)&&void 0!==f?f:void 0,useTimestamp:null!==(p=e.usetimestamp)&&void 0!==p?p:void 0,verbose:null!==(m=e.verbose)&&void 0!==m?m:void 0,withoutBackupFile:null!==(g=e.withoutbackup)&&void 0!==g?g:void 0,withoutComment:null!==(y=e.withoutcomment)&&void 0!==y?y:void 0}},t.merging=function(e,t){var o,i,n,r,l,u,s,d,a,c,f,p,m,w,_,b,h,x,C,O,F,E,M,D,P,j,S,k;const q=null!==(o=y(e.globOptions))&&void 0!==o?o:{},N=null!==(i=y(t.globOptions))&&void 0!==i?i:{};return v({addNewline:null!==(r=null!==(n=t.addNewline)&&void 0!==n?n:e.addNewline)&&void 0!==r?r:void 0,excludes:null!==(u=null!==(l=t.excludes)&&void 0!==l?l:e.excludes)&&void 0!==u?u:void 0,fileExcludePatterns:null!==(d=null!==(s=t.fileExcludePatterns)&&void 0!==s?s:e.fileExcludePatterns)&&void 0!==d?d:void 0,fileFirst:null!==(c=null!==(a=t.fileFirst)&&void 0!==a?a:e.fileFirst)&&void 0!==c?c:void 0,globOptions:g(q,N),includeCWD:null!==(p=null!==(f=t.includeCWD)&&void 0!==f?f:e.includeCWD)&&void 0!==p?p:void 0,output:null!==(w=null!==(m=t.output)&&void 0!==m?m:e.output)&&void 0!==w?w:void 0,quote:null!==(b=null!==(_=t.quote)&&void 0!==_?_:e.quote)&&void 0!==b?b:void 0,targetExts:null!==(x=null!==(h=t.targetExts)&&void 0!==h?h:e.targetExts)&&void 0!==x?x:void 0,useSemicolon:null!==(O=null!==(C=t.useSemicolon)&&void 0!==C?C:e.useSemicolon)&&void 0!==O?O:void 0,useTimestamp:null!==(E=null!==(F=t.useTimestamp)&&void 0!==F?F:e.useTimestamp)&&void 0!==E?E:void 0,verbose:null!==(D=null!==(M=t.verbose)&&void 0!==M?M:e.verbose)&&void 0!==D?D:void 0,withoutBackupFile:null!==(j=null!==(P=t.withoutBackupFile)&&void 0!==P?P:e.withoutBackupFile)&&void 0!==j?j:void 0,withoutComment:null!==(k=null!==(S=t.withoutComment)&&void 0!==S?S:e.withoutComment)&&void 0!==k?k:void 0})},t.mergingGlobOptions=g,t.cleanGlobOptions=y,t.cleansing=v,t.readConfigRC=function(e){var t,o;return i.__awaiter(this,void 0,void 0,(function*(){try{if(yield f(e)){const i=(yield c(e)).toString(),n=v(u.default.parse(i));if(void 0!==(null===(t=n.globOptions)||void 0===t?void 0:t.cwd)&&null!==(null===(o=n.globOptions)||void 0===o?void 0:o.cwd)){n.globOptions.cwd=d.resolve(n.globOptions.cwd);const e=r.default(n.globOptions,m.globOptions,{clone:!0});n.globOptions=e}return n.__for_debug_from=e,s.epass(n)}return s.epass({})}catch(e){return s.efail(e)}}))},t.concreteConfig=function(e){var t,o,i,n,r,l,u,s,d,a,c,f,p,g;return{addNewline:null!==(t=e.addNewline)&&void 0!==t?t:m.addNewline,excludes:null!==(o=e.excludes)&&void 0!==o?o:m.excludes,fileExcludePatterns:null!==(i=e.fileExcludePatterns)&&void 0!==i?i:m.fileExcludePatterns,fileFirst:null!==(n=e.fileFirst)&&void 0!==n?n:m.fileFirst,globOptions:null!==(r=y(e.globOptions))&&void 0!==r?r:m.globOptions,includeCWD:null!==(l=e.includeCWD)&&void 0!==l?l:m.includeCWD,output:null!==(u=e.output)&&void 0!==u?u:m.output,quote:null!==(s=e.quote)&&void 0!==s?s:m.quote,targetExts:null!==(d=e.targetExts)&&void 0!==d?d:m.targetExts,useSemicolon:null!==(a=e.useSemicolon)&&void 0!==a?a:m.useSemicolon,useTimestamp:null!==(c=e.useTimestamp)&&void 0!==c?c:m.useTimestamp,verbose:null!==(f=e.verbose)&&void 0!==f?f:m.verbose,withoutBackupFile:null!==(p=e.withoutBackupFile)&&void 0!==p?p:m.withoutBackupFile,withoutComment:null!==(g=e.withoutComment)&&void 0!==g?g:m.withoutComment}}},function(e,t,o){"use strict";function i(e){return e.startsWith(".")?e:"."+e}function n(e,t){return e.addNewline?t+"\n":t}function r(e){return null!=e}function l(e){return!r(e)}function u(e){return void 0!==e&&(null!==e&&("number"==typeof e||("string"!=typeof e||"false"!==e)&&("string"==typeof e&&"true"===e||Boolean(e))))}function s(e){return"d"===e||'"'===e?'"':"'"}Object.defineProperty(t,"__esModule",{value:!0}),t.getQuote=t.parseBool=t.isEmpty=t.isNotEmpty=t.isFalsy=t.addNewline=t.addDot=void 0,t.addDot=i,t.addNewline=n,t.isFalsy=function(e){return!e},t.isNotEmpty=r,t.isEmpty=l,t.parseBool=u,t.getQuote=s,t.default={addDot:i,addNewline:n,getQuote:s,isEmpty:l,isNotEmpty:r,parseBool:u}},function(e,t){e.exports=require("fs")},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CTILogger=void 0;t.CTILogger=class{constructor(e){e?(this.log=console.log,this.error=console.error):(this.log=()=>{},this.error=console.error),this.flog=console.log,this.ferror=console.error}}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CommandModule=void 0;const i=o(0),n=i.__importStar(o(1)),r=i.__importDefault(o(3)),l=i.__importStar(o(7)),u=i.__importDefault(o(19)),s=i.__importDefault(o(20)),d=i.__importStar(o(2)),a=i.__importStar(o(12)),c=r.default("cti:CommandModule");class f{static targetFileFilter({filenames:e,option:t,logger:o}){const i=t.targetExts.map(e=>e.startsWith(".")?e:"."+e);try{c("Start filter logic",t.fileExcludePatterns,e);return e.filter(e=>i.indexOf(d.extname(e))>=0).filter(e=>!t.excludes.reduce((t,o)=>t||d.dirname(e).indexOf(o)>=0,!1)).filter(e=>!e.endsWith(".d.ts")).filter(e=>!t.fileExcludePatterns.reduce((o,i)=>(c("ExcludePattern: ",u.default.hasMagic(i,t.globOptions),o||s.default(e,i)),u.default.hasMagic(i,t.globOptions)?o||s.default(e,i):o||s.default(e,`*${i}*`)),!1)).filter(e=>!t.targetExts.map(e=>"index."+e).reduce((t,o)=>t||e.indexOf(o)>=0,!1)).filter(e=>"."!==e)}catch(e){return o.error(n.default.redBright("Error occured: ",e)),[]}}}t.CommandModule=f,f.promisify={exists:a.promisify(l.exists),glob:a.promisify(u.default),readDir:a.promisify(l.readdir),readFile:a.promisify(l.readFile),stat:a.promisify(l.stat),unlink:a.promisify(l.unlink),writeFile:a.promisify(l.writeFile)}},function(e,t){e.exports=require("dayjs")},function(e,t){e.exports=require("json5")},function(e,t){e.exports=require("util")},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getExportStatementCreator=void 0;const i=o(0),n=i.__importDefault(o(1)),r=i.__importStar(o(2)),l=o(6);t.getExportStatementCreator=function(e,t){const o=e.targetExts.map(e=>l.addDot(e)),i="/"!==r.sep?e=>e.replace(new RegExp(r.sep.replace("\\","\\\\"),"g"),"/"):e=>e;if(e.useSemicolon){return u=>{const s=o.find(e=>r.extname(u)===e),d=l.isNotEmpty(s)?u.replace(s,""):u;return t.log(n.default.green("entrypoint added from:"),u),`export * from ${e.quote}./${i(d)}${e.quote};`}}return u=>{const s=o.find(e=>r.extname(u)===e),d=l.isNotEmpty(s)?u.replace(s,""):u;return t.log(n.default.green("entrypoint added from:"),u),`export * from ${e.quote}./${i(d)}${e.quote}`}}},function(e,t,o){e.exports=o(15)},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const i=o(0),n=i.__importStar(o(1)),r=i.__importDefault(o(3)),l=i.__importStar(o(7)),u=i.__importDefault(o(16)),s=o(17),d=o(21),a=o(22),c=o(23),f=o(5),p=o(24);function m(e,t){const o=p.options.get(e);null!=o&&t.option(e,o)}r.default("cti:cti-cli")("output filename: ",u.default.command({aliases:"$0 [cwds...]",builder:e=>{m("filefirst",e),m("addnewline",e),m("usesemicolon",e),m("includecwd",e),m("usetimestamp",e),m("excludes",e),m("fileexcludes",e),m("targetexts",e),m("verbose",e),m("quote",e),m("withoutcomment",e),m("withoutbackup",e),m("output",e);return e},command:"create [cwds...]",describe:"create index.ts file in working directory",handler:e=>i.__awaiter(void 0,void 0,void 0,(function*(){const t=process.cwd();e.cwds||(console.log(n.default.magenta("Enter working directory, ")),console.log(n.default.red("cti [working directory]")),process.exit(1));const o=Array.isArray(e.cwds)?e.cwds:[e.cwds];yield Promise.all(o.filter(e=>l.existsSync(e)).map(o=>{const i=new d.CreateCommandModule,n=f.createFromCli(e,o);return i.do(t,n)}))}))}).command({builder:e=>{m("addnewline",e),m("usesemicolon",e),m("includecwd",e),m("usetimestamp",e),m("excludes",e),m("fileexcludes",e),m("targetexts",e),m("verbose",e),m("quote",e),m("withoutcomment",e),m("withoutbackup",e),m("output",e);return e},command:"entrypoint [cwds...]",describe:"create entrypoint.ts file in working directory",handler:e=>i.__awaiter(void 0,void 0,void 0,(function*(){const t=process.cwd();e.cwds||(console.log(n.default.magenta("Enter working directory, ")),console.log(n.default.red("cti [working directory]")),process.exit(1));const o=Array.isArray(e.cwds)?e.cwds:[e.cwds];yield Promise.all(o.filter(e=>l.existsSync(e)).map(o=>{const i=new a.EntrypointCommandModule,n=f.createFromCli(e,o,"entrypoint.ts");return i.do(t,n)}))}))}).command({builder:e=>{m("addnewline",e),m("usetimestamp",e),m("verbose",e);return e},command:"init [cwds...]",describe:"create .ctirc file in working directory",handler:e=>i.__awaiter(void 0,void 0,void 0,(function*(){const t=process.cwd();e.cwds||(console.log(n.default.magenta("Enter working directory, ")),console.log(n.default.red("cti [working directory]")),process.exit(1));const o=Array.isArray(e.cwds)?e.cwds:[e.cwds];yield Promise.all(o.filter(e=>l.existsSync(e)).map(o=>{const i=new c.InitCommandModule,n=f.createFromCli(e,o);return i.do(t,n)}))}))}).command({builder:e=>{m("verbose",e),m("output",e);return e},command:"clean [cwds...]",describe:"clean index.ts or entrypoint.ts file in working directory",handler:e=>i.__awaiter(void 0,void 0,void 0,(function*(){const t=process.cwd();e.cwds||(console.log(n.default.magenta("Enter working directory, ")),console.log(n.default.red("cti [working directory]")),process.exit(1));const o=Array.isArray(e.cwds)?e.cwds:[e.cwds];yield Promise.all(o.filter(e=>l.existsSync(e)).map(o=>{const i=new s.CleanCommandModule,n=f.createFromCli(e,o);return i.do(t,n)}))}))}).version("1.10.2","version","display version information").help().argv.output)},function(e,t){e.exports=require("yargs")},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CleanCommandModule=void 0;const i=o(0),n=i.__importDefault(o(1)),r=o(4),l=i.__importStar(o(2)),u=o(5),s=o(8),d=o(6),a=o(9);t.CleanCommandModule=class{do(e,t){return i.__awaiter(this,void 0,void 0,(function*(){const o=d.isNotEmpty(t.globOptions)&&d.isNotEmpty(t.globOptions.cwd)?t.globOptions.cwd:process.cwd(),i=yield u.readConfigRC(u.getRCFilename(e)),c=yield u.readConfigRC(u.getRCFilename(o)),f=u.concreteConfig(u.merging(u.merging(r.isPass(i)?i.pass:u.getDeafultOptions(),r.isPass(c)?c.pass:u.getDeafultOptions()),t)),p=new s.CTILogger(f.verbose);p.log(n.default.yellowBright("Option: "),f);const m=yield a.CommandModule.promisify.glob("**/index.ts",{cwd:o,nonull:!1}),g=yield a.CommandModule.promisify.glob("**/index.ts.bak",{cwd:o,nonull:!1}),y=yield a.CommandModule.promisify.glob("**/entrypoint.ts",{cwd:o,nonull:!1}),v=yield a.CommandModule.promisify.glob("**/entrypoint.ts.bak",{cwd:o,nonull:!1}),w=yield a.CommandModule.promisify.glob("**/"+f.output,{cwd:o,nonull:!1}),_=yield a.CommandModule.promisify.glob(`**/${f.output}.bak`,{cwd:o,nonull:!1}),b=m.concat(g).concat(y).concat(v).concat(w).concat(_),h=new Set(b);0===b.length&&p.flog(n.default.yellow("Cannot find target file on working directory: "+o)),yield Promise.all(Array.from(h).map(e=>(p.log(n.default.redBright("delete file: "),l.join(o,e)),a.CommandModule.promisify.unlink(l.join(o,e))))),p.flog(n.default.green("clean succeeded: "+o))}))}write(e){return i.__awaiter(this,void 0,void 0,(function*(){throw new Error("Not Implemented")}))}}},function(e,t){e.exports=require("deepmerge")},function(e,t){e.exports=require("glob")},function(e,t){e.exports=require("minimatch")},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.CreateCommandModule=void 0;const i=o(0),n=i.__importDefault(o(1)),r=i.__importDefault(o(10)),l=i.__importDefault(o(3)),u=o(4),s=i.__importStar(o(2)),d=o(5),a=o(8),c=o(6),f=o(13),p=o(9),m=l.default("cti:CreateCommandModule");t.CreateCommandModule=class{do(e,t){return i.__awaiter(this,void 0,void 0,(function*(){const o=c.isNotEmpty(t.globOptions)&&c.isNotEmpty(t.globOptions.cwd)?t.globOptions.cwd:process.cwd(),i=yield d.readConfigRC(d.getRCFilename(e)),r=yield d.readConfigRC(d.getRCFilename(o)),l=d.concreteConfig(d.merging(d.merging(u.isPass(i)?i.pass:d.getDeafultOptions(),u.isPass(r)?r.pass:d.getDeafultOptions()),t)),f=new a.CTILogger(l.verbose);try{f.log(n.default.yellowBright("Option: "),l),m("opt: ",l);const e=l.targetExts.map(e=>"*."+e).join("|"),t=yield p.CommandModule.promisify.glob(`**/+(${e})`,l.globOptions),o=p.CommandModule.targetFileFilter({logger:f,option:l,filenames:t}),i=o.filter(e=>e.split("/").length>1).map(e=>{const t=e.split("/");return Array(t.length-1).fill(0).map((e,t)=>t+1).map(e=>t.slice(0,e).join("/"))}).reduce((e,t)=>e.concat(t),[]),r=new Set;i.forEach(e=>r.add(e)),o.map(e=>s.dirname(e)).forEach(e=>r.add(e));const u=Array.from(r);l.includeCWD&&u.findIndex(e=>s.resolve(e)===s.resolve("."))<0&&u.push("."),u.sort((e,t)=>{const o=e.split("/").length,i=t.split("/").length;return o>i?-1:o<i?1:0}),m("tsDirs:: ",u),yield Promise.all(u.map(e=>this.write({option:l,logger:f,directory:e,directories:u}))),f.flog(n.default.green("create succeeded: "+l.globOptions.cwd))}catch(e){m(e.message),m(e.stack),f.ferror(n.default.red(e.message))}}))}write({directory:e,option:t,logger:o}){return i.__awaiter(this,void 0,void 0,(function*(){try{o.log(n.default.yellowBright("Current working directory: ",e));const i=s.resolve(t.globOptions.cwd||__dirname),l=yield p.CommandModule.promisify.readDir(s.join(i,e)),u=yield Promise.all(l.map(t=>p.CommandModule.promisify.stat(s.join(i,e,t)))),d=l.reduce((e,t,o)=>(e[t]=u[o],e),{}),a=l.filter(e=>d[e].isDirectory()||"index.ts"!==e).filter(e=>d[e].isDirectory()||"entrypoint.ts"!==e).filter(e=>d[e].isDirectory()||e!==t.output).reduce((e,t)=>(d[t].isDirectory()?e.dir.push(t):e.allFiles.push(t),e),{dir:[],allFiles:[]}),m=a.dir.filter(e=>!t.excludes.reduce((t,o)=>t||e.indexOf(o)>=0,!1));m.sort(),a.allFiles=p.CommandModule.targetFileFilter({logger:o,option:t,filenames:a.allFiles});const g=[...a.allFiles].sort(),y=t.fileFirst?a.allFiles.concat(m):m.concat(g),v=f.getExportStatementCreator(t,o),w=y.map(e=>v(e)),_=(()=>t.withoutComment?"":t.useTimestamp?`// created from ${t.quote}create-ts-index${t.quote} ${r.default().format("YYYY-MM-DD HH:mm")}\n\n`:`// created from ${t.quote}create-ts-index${t.quote}\n\n`)()+c.addNewline(t,w.join("\n"));if(o.log(n.default.green("created: "),""+s.join(i,e,t.output)),t.withoutBackupFile)return void(yield p.CommandModule.promisify.writeFile(s.join(i,e,t.output),_,"utf8"));const b=s.join(i,e,t.output),h=s.join(i,e,t.output+".bak");(yield p.CommandModule.promisify.exists(b))&&(o.log(n.default.green("created: "),""+h),yield p.CommandModule.promisify.writeFile(h,yield p.CommandModule.promisify.readFile(b),"utf8")),yield p.CommandModule.promisify.writeFile(b,_,"utf8")}catch(e){m(e.message),m(e.stack),o.error(n.default.red("indexWriter: ",e.message))}}))}}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.EntrypointCommandModule=void 0;const i=o(0),n=i.__importDefault(o(1)),r=i.__importDefault(o(10)),l=i.__importDefault(o(3)),u=o(4),s=i.__importStar(o(2)),d=o(5),a=o(8),c=o(6),f=o(13),p=o(9),m=l.default("cti:EntrypointCommandModule");t.EntrypointCommandModule=class{do(e,t){var o;return i.__awaiter(this,void 0,void 0,(function*(){const i=c.isNotEmpty(t.globOptions)&&c.isNotEmpty(t.globOptions.cwd)?t.globOptions.cwd:process.cwd(),r=yield d.readConfigRC(d.getRCFilename(e)),l=yield d.readConfigRC(d.getRCFilename(i));t.output=null!==(o=t.output)&&void 0!==o?o:"entrypoint.ts";const f=d.concreteConfig(d.merging(d.merging(u.isPass(r)?r.pass:{},u.isPass(l)?l.pass:{}),t)),g=new a.CTILogger(f.verbose);try{g.log(n.default.yellowBright("Option: "),f);const e=f.targetExts.map(e=>"*."+e).join("|"),t=yield p.CommandModule.promisify.glob(`**/+(${e})`,f.globOptions),o=p.CommandModule.targetFileFilter({logger:g,option:f,filenames:t}),i=o.filter(e=>e.split("/").length>1).map(e=>{const t=e.split("/");return Array(t.length-1).fill(0).map((e,t)=>t+1).map(e=>t.slice(0,e).join("/"))}).reduce((e,t)=>e.concat(t),[]),r=new Set;i.forEach(e=>r.add(e)),o.map(e=>s.dirname(e)).forEach(e=>r.add(e));const l=Array.from(r);f.includeCWD&&l.findIndex(e=>s.resolve(e)===s.resolve("."))<0&&l.push("."),l.sort((e,t)=>{const o=e.split("/").length,i=t.split("/").length;return o>i?-1:o<i?1:0}),yield this.write({logger:g,option:f,directories:l}),g.flog(n.default.green("entrypoint create succeeded: "+f.globOptions.cwd))}catch(e){m("entrypoint: ",e.message),m("entrypoint: ",e.stack),g.ferror(n.default.redBright(e))}}))}write({directories:e,option:t,logger:o}){return i.__awaiter(this,void 0,void 0,(function*(){try{const l=(yield Promise.all(e.map(e=>(()=>i.__awaiter(this,void 0,void 0,(function*(){const i=s.resolve(t.globOptions.cwd||__dirname),n=yield p.CommandModule.promisify.readDir(s.join(i,e)),r=yield Promise.all(n.map(t=>p.CommandModule.promisify.stat(s.join(i,e,t)))),l=n.reduce((e,t,o)=>(e[t]=r[o],e),{}),u=n.filter(e=>l[e].isDirectory()||"index.ts"!==e).filter(e=>l[e].isDirectory()||"entrypoint.ts"!==e).filter(e=>l[e].isDirectory()||e!==t.output).reduce((e,t)=>(l[t].isDirectory()?e.dir.push(t):e.allFiles.push(t),e),{dir:[],allFiles:[]});u.dir.filter(e=>!t.excludes.reduce((t,o)=>t||e.indexOf(o)>=0,!1)).sort(),u.allFiles=p.CommandModule.targetFileFilter({logger:o,option:t,filenames:u.allFiles});return[...u.allFiles].sort().map(t=>s.relative(i,s.join(i,e,t)))})))()))).reduce((e,t)=>e.concat(t)),u=f.getExportStatementCreator(t,o),d=l.map(e=>u(e)),a=(()=>t.withoutComment?"":t.useTimestamp?`// created from ${t.quote}create-ts-index${t.quote} ${r.default().format("YYYY-MM-DD HH:mm")}\n\n`:`// created from ${t.quote}create-ts-index${t.quote}\n\n`)(),m=d.sort(),g=a+c.addNewline(t,m.join("\n")),y=t.globOptions.cwd||__dirname;o.log(n.default.green("entrypoiny writed:",`${y}${s.sep}${t.output}`));const v=s.join(y,t.output),w=s.join(y,t.output+".bak");if(t.withoutBackupFile)return void(yield p.CommandModule.promisify.writeFile(v,g,"utf8"));(yield p.CommandModule.promisify.exists(v))&&(o.log(n.default.green("created: "),""+w),yield p.CommandModule.promisify.writeFile(w,yield p.CommandModule.promisify.readFile(v),"utf8")),yield p.CommandModule.promisify.writeFile(v,g,"utf8")}catch(e){o.error(n.default.red("indexWriter: ",e.message)),o.error(n.default.red("indexWriter: ",e.stack))}}))}}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InitCommandModule=void 0;const i=o(0),n=i.__importDefault(o(1)),r=i.__importDefault(o(10)),l=i.__importDefault(o(3)),u=i.__importStar(o(7)),s=i.__importDefault(o(11)),d=o(4),a=i.__importStar(o(2)),c=o(5),f=o(8),p=o(6),m=l.default("cti:InitCommandModule");t.InitCommandModule=class{do(e,t){return i.__awaiter(this,void 0,void 0,(function*(){const o=p.isNotEmpty(t.globOptions)&&p.isNotEmpty(t.globOptions.cwd)?t.globOptions.cwd:process.cwd(),i=yield c.readConfigRC(c.getRCFilename(e)),l=yield c.readConfigRC(c.getRCFilename(o)),g=c.concreteConfig(c.merging(c.merging(d.isPass(i)?i.pass:c.getDeafultOptions(),d.isPass(l)?l.pass:c.getDeafultOptions()),t));m("readed option: ",g);const y=new f.CTILogger(g.verbose);try{const e=c.getDeafultOptions(),t=s.default.stringify(e,null,2),i=g.useTimestamp?`// created from ${g.quote}create-ts-index${g.quote} ${r.default().format("YYYY-MM-DD HH:mm")}`:`// created from ${g.quote}create-ts-index${g.quote}`,l=g.addNewline?"\n":"";yield new Promise((e,r)=>{u.writeFile(a.join(o,".ctirc"),`${i}\n\n${t}${l}`,t=>p.isNotEmpty(t)?r(t):(y.flog(n.default.green(".ctirc create succeeded: "+g.globOptions.cwd)),e()))})}catch(e){y.error(n.default.red("indexWriter: ",e.message)),y.error(n.default.red("indexWriter: ",e.stack))}}))}write(e){return i.__awaiter(this,void 0,void 0,(function*(){throw new Error("Not implements")}))}}},function(e,t,o){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.options=void 0,t.options=new Map([["filefirst",{alias:"f",describe:"export list create filefirst, no option false, option true",type:"boolean"}],["addnewline",{alias:"n",describe:"deside add newline file ending. no option true, option false",type:"boolean"}],["usesemicolon",{alias:"s",describe:"deside use semicolon line ending. no option true, option false",type:"boolean"}],["includecwd",{alias:"c",describe:"deside include cwd directory in task. no option true, option false",type:"boolean"}],["usetimestamp",{alias:"t",describe:"deside use timestamp(YYYY-MM-DD HH:mm) top line comment. \nno option false, option true",type:"boolean"}],["excludes",{alias:"e",array:!0,describe:"pass exclude directory. default exclude directory is ['@types', 'typings', '__test__', '__tests__']",type:"string"}],["fileexcludes",{alias:"i",array:!0,describe:'pass exclude pattern of filename. default exclude directory is "[]"',type:"string"}],["targetexts",{alias:"x",array:!0,describe:'pass include extname. default extname is ["ts", "tsx"]. extname \npass without dot charactor.',type:"string"}],["withoutcomment",{alias:"w",describe:"remove comment from created file",type:"boolean"}],["withoutbackup",{alias:"b",describe:"Don't create backupfile if already exists target file",type:"boolean"}],["verbose",{alias:"v",describe:"verbose logging message. to option false, option true",type:"boolean"}],["quote",{alias:"q",describe:"deside quote character. default quote character is '",type:"string"}],["output",{alias:"o",describe:"set output filename. default index.ts or entrypoint.ts",type:"string"}]])}]));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,