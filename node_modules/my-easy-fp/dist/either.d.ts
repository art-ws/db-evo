export interface IFail<ERR = Error> {
    readonly __tag: 'fail';
    readonly fail: ERR;
}
export interface IPass<DATA> {
    readonly __tag: 'pass';
    readonly pass: DATA;
}
export declare type Either<DATA, ERR = Error> = IFail<ERR> | IPass<DATA>;
export declare function efail<DATA = never, ERR = never>(e: ERR): Either<DATA, ERR>;
export declare function epass<DATA = never, ERR = never>(a: DATA): Either<DATA, ERR>;
export declare function isFail<DATA = never, ERR = never>(either: Either<DATA, ERR>): either is IFail<ERR>;
export declare function isPass<DATA = never, ERR = never>(either: Either<DATA, ERR>): either is IPass<DATA>;
